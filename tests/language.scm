(use-modules (minikanren language)
             (minikanren records))
(use-modules (srfi srfi-64))

(test-begin "language basic")
(test-equal (run* (lambda (q) (== q 'x)))
  '((x where)))
(test-equal (run* (lambda (q) (== q q)))
  '((_.0 where)))
(test-equal (run* (lambda (q) (== 'x 'y)))
  '())
(test-equal (run* (lambda (q)
		    (fresh ()
		      (== q 'x)
		      (== q 'y))))
  '())
(test-end "language basic")

(test-begin "language unification")
(test-equal (run* (lambda (q)
		    (fresh (x y)
		      (== q (list x y))
		      (== x 'x)
		      (== y 'y))))
  '(((x y) where)))
(test-equal (run* (lambda (q)
		    (fresh (x y)
		      (== q (list x y))
		      (== (list x y) '(x y)))))
  '(((x y) where)))
(test-equal (run* (lambda (q)
		    (fresh (a b c d e)
		      (== q a)
		      (== a b)
		      (== c b)
		      (== e d)
		      (== c d)
		      (== e 'z))))
  '((z where)))
(test-equal (run* (lambda (q)
		    (fresh (x y z)
		      (== q (list x y z))
		      (== `(,x (,y ,x) (c b ,y b))
			  `(a (b ,x) (,z ,y b ,y))))))
  '(((a b c) where)))
(test-end "language unification")

(test-begin "language occurs")
(test-equal (run* (lambda (q) (== q (list q))))
  '())
(test-equal (run* (lambda (q) (== q (cons q q))))
  '())
(test-equal (run* (lambda (q)
		    (fresh (x)
		      (== q x)
		      (== x (list q)))))
  '())
(test-equal (run* (lambda (q)
		    (fresh (x)
		      (== q (list x))
		      (== x (list q)))))
  '())
(test-equal (run* (lambda (x)
		    (fresh (y)
		      (== `(f (g ,y) ,x) `(f ,x (h ,y))))))
  '())
(test-end "language occurs")

(test-begin "language disequality")
(test-equal (run* (lambda (q) (=/= q q)))
  '())
(test-equal (run* (lambda (q) (=/= 'x 'x)))
  '())
(test-equal (run* (lambda (q) (=/= 'x 'y)))
  '((_.0 where)))
(test-equal (run* (lambda (q) (=/= q 'x)))
  '((_.0 where (or (=/= _.0 x)))))
(test-equal (run* (lambda (q)
		    (fresh ()
		      (=/= q 'x)
		      (== q 'x))))
  '())
(test-equal (run* (lambda (q)
		    (fresh ()
		      (== q 'x)
		      (=/= q 'x))))
  '())
(test-equal (run* (lambda (q)
		    (fresh ()
		      (=/= q 'y)
		      (== q 'x))))
  '((x where)))
(test-equal (run* (lambda (q)
		    (fresh ()
		      (== q 'x)
		      (=/= q 'y))))
  '((x where)))
(test-equal (run* (lambda (q)
                    (fresh (x y u v)
                      (=/= (cons x y) (cons u v))
                      (== x 'e)
                      (== u 'e))))
  '((_.0 where (or (=/= _.1 _.2)))))
(test-equal (run* (lambda (q)
		    (fresh (x y)
		      (== q (list x y))
		      (=/= x y)
		      (== (list x y) (list 'p 'q)))))
  '(((p q) where)))
(test-equal (run* (lambda (q)
		    (fresh (x y)
		      (== q (list x y))
		      (=/= x y)
		      (== (list x y) (list 'p 'p)))))
  '())
(test-equal (run* (lambda (q)
		    (fresh (x y u v)
		      (== q (list x y u v))
		      (=/= (list x y) (list u v))
		      (== x 'x) (== u 'x))))
  '(((x _.0 x _.1) where (or (=/= _.0 _.1)))))
(test-end "language disequality")

(test-begin "language records")
(define-record kan-box (cell cell-value))
(define-record kan-tin (contents get-contents))
(test-equal (run* (lambda (q)
                    ;; verify occurs check
                    (== (kan-box q) q)))
  '())
(test-equal (run* (lambda (q)
                    (== (kan-box 'jack)
                        (kan-box q))))
  '((jack where)))
(test-equal (run* (lambda (q)
                    (== (kan-box 'jack)
                        (kan-tin q))))
  '())
(test-equal (run* (lambda (q)
                    (== (kan-box q)
                        '(kan-box jack))))
  '())
(test-end "language records")
